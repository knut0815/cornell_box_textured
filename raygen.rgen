#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable


struct ray
{
	vec4 direction;
	vec4 origin;
	
	bool in_use;

	vec3 normal;

	int child_refract_id;
	int child_reflect_id;
	int parent_id;

	float base_color;
	float accumulated_color;

	float reflection_constant;
	float refraction_constant;

	bool external_reflection_ray;
	bool external_refraction_ray;

	int level;
};



const int red_channel = 0;
const int green_channel = 1;
const int blue_channel = 2;
const float red_eta = 0.85;
const float green_eta = 0.90;
const float blue_eta = 0.95;
ivec2 pixel_pos = ivec2(gl_LaunchIDEXT.xy);
ivec2 res = ivec2(gl_LaunchSizeEXT.xy);

const float TWO_PI = 8.0 * atan(1.0);



uint prng_state = res.x * pixel_pos.y + pixel_pos.x;


const int max_lights = 2;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D color_image;
layout(binding = 2, set = 0) uniform UBO 
{
	mat4 viewInverse;
	mat4 projInverse;

	mat4 transformation_matrix;

	vec4 light_positions[max_lights];
	vec4 light_colors[max_lights];

	vec3 camera_pos;
	int vertexSize;
} ubo;



struct RayPayload {
	vec3 color;
	vec3 pure_color;
	float distance;
	vec3 normal;
	float reflector;
	float opacity;
	vec3 pos;
	vec3 wro;
	vec3 wrd;
	float hitt;
	int recursive;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(location = 2) rayPayloadEXT bool shadowed;

float stepAndOutputRNGFloat(inout uint rngState)
{
  // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
  rngState  = rngState * 747796405 + 1;
  uint word = ((rngState >> ((rngState >> 28) + 4)) ^ rngState) * 277803737;
  word      = (word >> 22) ^ word;
  return float(word) / 4294967295.0f;
}

// See: https://github.com/nvpro-samples/vk_mini_path_tracer/blob/main/vk_mini_path_tracer/shaders/raytrace.comp.glsl#L26
vec3 RandomUnitVector(inout uint state)
{
    float z = stepAndOutputRNGFloat(state) * 2.0f - 1.0f;
    float a = stepAndOutputRNGFloat(state) * TWO_PI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}




// Max. number of recursion is passed via a specialization constant
layout (constant_id = 0) const int MAX_RECURSION = 0;
const int buffer_size = 32;




vec3 cosWeightedRandomHemisphereDirection( const vec3 n, inout uint state )
{
  	vec2 r = vec2(stepAndOutputRNGFloat(state), stepAndOutputRNGFloat(state));

	vec3  uu = normalize( cross( n, vec3(0.0,1.0,1.0) ) );
	vec3  vv = cross( uu, n );
	
	float ra = sqrt(r.y);
	float rx = ra*cos(6.2831*r.x); 
	float ry = ra*sin(6.2831*r.x);
	float rz = sqrt( 1.0-r.y );
	vec3  rr = vec3( rx*uu + ry*vv + rz*n );
    
    return normalize( rr );
}






float trace_path2(const int steps, const vec3 origin, const vec3 direction, const int channel, const float eta)
{
	float ret_colour = 0;
	float direct_colour = 0;

	vec3 o = origin;
	vec3 d = direction;

	const int samples = 100;

	for(int s = 0; s < samples; s++)
	{
		float local_colour = 0;

		for(int i = 0; i < steps; i++)
		{
			float tmin = 0.001;
			float tmax = 1000.0;
			traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, o.xyz, tmin, d.xyz, tmax, 0);

			if(i == 0)
			{
				if(channel == red_channel)
					direct_colour = rayPayload.color.r;
				else if(channel == green_channel)
					direct_colour = rayPayload.color.g;
				else
					direct_colour = rayPayload.color.b;			
			}

			if(channel == red_channel)
				local_colour += rayPayload.color.r;
			else if(channel == green_channel)
				local_colour += rayPayload.color.g;
			else
				local_colour += rayPayload.color.b;


			if(rayPayload.distance == -1)
				break;


			vec3 hitPos = o + d * rayPayload.distance;


			if(rayPayload.color.r == 1.0 && rayPayload.color.g == 1.0 && rayPayload.color.b == 1.0)
			{
				ret_colour += local_colour;
			}
			else
			{
				if(rayPayload.opacity != 1.0)
				{
					if(dot(d, rayPayload.normal) <= 0.0)
					{
						o = hitPos.xyz - rayPayload.normal * 0.01f;
						d = refract(d, rayPayload.normal, eta);
					}
					else
					{
						vec3 temp_dir = refract(d, -rayPayload.normal, 1.0/eta);

						if(temp_dir != vec3(0.0))
						{
							o = hitPos.xyz + rayPayload.normal * 0.01f;
							d = temp_dir;
						}
						else
						{
							o = hitPos.xyz - rayPayload.normal * 0.01f;
							d = reflect(d, -rayPayload.normal);
						}
					}
				}
				else
				{
					o = hitPos + normalize(rayPayload.normal)*0.01;
					d = cosWeightedRandomHemisphereDirection(normalize(rayPayload.normal), prng_state);
					d = mix(d, reflect(d, rayPayload.normal), rayPayload.reflector);
				}
			}
		}

		o = origin;
		d = direction;

		ret_colour += local_colour;
	}

	return ret_colour / samples / steps;
}







float get_ray0(const int channel, const float eta)
{
	// This algorithm stops when the buffer runs out of space,
	// or when the rays miss everything,
	// or when the level is too deep

	ray rays[buffer_size];
	int current_buffer_index = 0;

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = ubo.viewInverse * vec4(0,0,0,1);
	vec4 target = ubo.projInverse * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = ubo.viewInverse*vec4(normalize(target.xyz / target.w), 0);

	uint rayFlags = gl_RayFlagsOpaqueEXT;
	uint cullMask = 0xff;
	float tmin = 0.001;
	float tmax = 10000.0;

	// Step one: make tree of ray segments
	for(int i = 0; i < buffer_size; i++)
	{
		// Initialize buffer
		rays[i].in_use = false;
		rays[i].child_reflect_id = -1;
		rays[i].child_refract_id = -1;
		rays[i].parent_id = -1;
		rays[i].external_reflection_ray = false;
		rays[i].external_refraction_ray = false;
	}

	rays[0].direction = direction;
	rays[0].origin = origin;
	rays[0].in_use = true;
	rays[0].level = 0;
	rays[0].external_reflection_ray = true;
	rays[0].external_refraction_ray = false;
	current_buffer_index++;



	while(true)
	{
		int used_count = 0;

		for(int i = 0; i < buffer_size; i++)
		{
			if(rays[i].in_use)
			{
				used_count++;
		
				rays[i].base_color = trace_path2(20, rays[i].origin.xyz, rays[i].direction.xyz, channel, eta);

				traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, rays[i].origin.xyz, tmin, rays[i].direction.xyz, tmax, 0);
				vec4 hitPos = rays[i].origin + rays[i].direction * rayPayload.distance;

				rays[i].normal = rayPayload.normal;

				rays[i].reflection_constant = rayPayload.reflector;
				rays[i].refraction_constant = rayPayload.opacity;

				// this particular ray missed everything, or got too deep
				if(rayPayload.distance == -1.0 || rays[i].level >= MAX_RECURSION)
				{
					rays[i].in_use = false;
					continue;
				}

				// entering mesh
				if(dot(rays[i].direction.xyz, rayPayload.normal) <= 0.0)
				{
					if(current_buffer_index < buffer_size && rays[i].reflection_constant != 0.0)
					{
						rays[i].child_reflect_id = current_buffer_index;

						//generate new ray segment
						rays[current_buffer_index].origin.xyz = hitPos.xyz + rayPayload.normal * 0.01f;
						rays[current_buffer_index].direction.xyz = reflect(rays[i].direction.xyz, rayPayload.normal);
						rays[current_buffer_index].in_use = true;
						rays[current_buffer_index].level = rays[i].level + 1;
						rays[current_buffer_index].external_reflection_ray = true;
						rays[current_buffer_index].external_refraction_ray = false;
						rays[current_buffer_index].parent_id = i;
						current_buffer_index++;
					}

					if(current_buffer_index < buffer_size && rays[i].refraction_constant != 1.0)
					{
						rays[i].child_refract_id = current_buffer_index;

						//generate new ray segment
						rays[current_buffer_index].origin.xyz = hitPos.xyz - rayPayload.normal * 0.01f;
						rays[current_buffer_index].direction.xyz = refract(rays[i].direction.xyz, rayPayload.normal, eta);
						rays[current_buffer_index].in_use = true;
						rays[current_buffer_index].level = rays[i].level + 1;
						rays[current_buffer_index].external_reflection_ray = false;
						rays[current_buffer_index].external_refraction_ray = false;
						rays[current_buffer_index].parent_id = i;
						current_buffer_index++;
					}	
				}
				// exiting mesh
				else
				{
					if(current_buffer_index < buffer_size)
					{
						rays[i].child_refract_id = current_buffer_index;

						vec3 temp_dir = refract(rays[i].direction.xyz, -rayPayload.normal, 1.0/eta);

						if(temp_dir != vec3(0.0))
						{
							//generate new ray segment
							rays[current_buffer_index].origin.xyz = hitPos.xyz + rayPayload.normal * 0.01f;
							rays[current_buffer_index].direction.xyz = temp_dir;
							rays[current_buffer_index].in_use = true;
							rays[current_buffer_index].level = rays[i].level + 1;
							rays[current_buffer_index].external_reflection_ray = false;
							rays[current_buffer_index].external_refraction_ray = true;
							rays[current_buffer_index].parent_id = i;
							current_buffer_index++;
						}
						else
						{
							// Total internal reflection

							//generate new ray segment
							rays[current_buffer_index].origin.xyz = hitPos.xyz - rayPayload.normal * 0.01f;
							rays[current_buffer_index].direction.xyz = reflect(rays[i].direction.xyz, -rayPayload.normal);;
							rays[current_buffer_index].in_use = true;
							rays[current_buffer_index].level = rays[i].level + 1;
							rays[current_buffer_index].external_reflection_ray = false;
							rays[current_buffer_index].external_refraction_ray = false;
							rays[current_buffer_index].parent_id = i;
							current_buffer_index++;
						}
					}
				}

				// The processing of this ray segment is complete
				rays[i].in_use = false;
			}
		}

		if(used_count == 0)
			break;
	}

	
	
	// Step two: this is the Fresnel reflection-refraction code
	// Start at the tips of the branches, work backwards to the root
	for(int i = current_buffer_index - 1; i >= 0; i--)
	{
		bool pure_refraction = false;
		bool pure_reflection = false;
		bool neither = false;
		bool both = false;

		if(rays[i].child_refract_id != -1 && rays[i].child_reflect_id == -1)
			pure_refraction = true;

		if(rays[i].child_refract_id == -1 && rays[i].child_reflect_id != -1)
			pure_reflection = true;

		if(rays[i].child_refract_id == -1 && rays[i].child_reflect_id == -1)
			neither = true;

		if(rays[i].child_refract_id != -1 && rays[i].child_reflect_id != -1)
			both = true;

		float accum = 0.0;

		if(neither)
		{
			accum = rays[i].base_color;
		}
		else if(both)
		{
			// Fake the Fresnel refraction-reflection
			const float ratio = 1.0 - dot(-normalize(rays[i].direction.xyz), rays[i].normal);

			float reflect_accum = mix(rays[i].base_color, rays[rays[i].child_reflect_id].accumulated_color, rays[i].reflection_constant);
			float refract_accum = mix(rays[i].base_color, rays[rays[i].child_refract_id].accumulated_color, 1.0 - rays[i].refraction_constant);
		
			accum = mix(refract_accum, reflect_accum, ratio);
		}
		else if(pure_refraction)
		{
			accum = mix(rays[i].base_color, rays[rays[i].child_refract_id].accumulated_color, 1.0 - rays[i].refraction_constant);	
		}
		else if(pure_reflection)
		{
			accum = mix(rays[i].base_color, rays[rays[i].child_reflect_id].accumulated_color, rays[i].reflection_constant);
		}
		
		rays[i].accumulated_color = accum;
	}
	



	// Show level depth as grayscale colour
	//float s = 1.0 - float(rays[current_buffer_index - 1].level) / float(MAX_RECURSION);
	// return s;


	// Show buffer fullness as grayscale colour
	//float s = 1.0 - float(current_buffer_index - 1) / float(buffer_size);
	//return s;



	// Return root ray segment colour
	return rays[0].accumulated_color;
}


 


void main() 
{
	// Calculate chromatic aberration

	prng_state = res.x * pixel_pos.y + pixel_pos.x;
	const float red = get_ray0(red_channel, red_eta);

	prng_state = res.x * pixel_pos.y + pixel_pos.x;
	const float green = get_ray0(green_channel, green_eta);
	
	prng_state = res.x * pixel_pos.y + pixel_pos.x;
	const float blue = get_ray0(blue_channel, blue_eta);

	vec3 color = vec3(red, green, blue);
	color = pow(color, vec3(3.0));

	imageStore(color_image, pixel_pos, vec4(color, 0.0));
}
